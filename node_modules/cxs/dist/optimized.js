'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _index = require('./index');

var _index2 = _interopRequireDefault(_index);

var _commonDeclarations = require('./common-declarations');

var _commonDeclarations2 = _interopRequireDefault(_commonDeclarations);

var _createRules = require('./create-rules');

var _sheet = require('./sheet');

var _sheet2 = _interopRequireDefault(_sheet);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var commonCache = [];

var isCommon = function isCommon(prop, value) {
  return _commonDeclarations2.default[prop] && _commonDeclarations2.default[prop].indexOf(value) > -1;
};

var extractCommon = function extractCommon(style) {
  var rules = Object.keys(style).map(function (prop) {
    var value = style[prop];
    return { prop: prop, value: value };
  }).filter(function (_ref) {
    var prop = _ref.prop,
        value = _ref.value;
    return isCommon(prop, value);
  }).map(function (_ref2) {
    var prop = _ref2.prop,
        value = _ref2.value;
    return {
      prop: (0, _createRules.kebab)(prop),
      value: (0, _createRules.parseValue)(prop, value)
    };
  });
  return rules;
};

var filterCommon = function filterCommon(style) {
  var custom = {};
  Object.keys(style).map(function (prop) {
    if (!isCommon(prop, style[prop])) {
      custom[prop] = style[prop];
    }
  });
  return custom;
};

var createCommonRule = function createCommonRule(_ref3) {
  var prop = _ref3.prop,
      value = _ref3.value;

  var id = prop + '_' + value;
  var selector = '.cxs-' + prop + '-' + value;
  var css = (0, _createRules.createRuleset)(selector, [{ prop: prop, value: value }]);

  return {
    id: id,
    selector: selector,
    css: css
  };
};

var optimized = function optimized(style) {
  var commonRules = extractCommon(style).map(createCommonRule);
  var commonClassNames = commonRules.map(function (_ref4) {
    var selector = _ref4.selector;
    return selector.replace(/^\./, '');
  });

  commonRules.filter(function (rule) {
    return commonCache.indexOf(rule.id) < 0;
  }).forEach(function (_ref5) {
    var id = _ref5.id,
        css = _ref5.css;

    commonCache.push(id);
    _sheet2.default.insert(css);
  });

  var customStyle = filterCommon(style);
  var customClassName = (0, _index2.default)(customStyle);

  return [].concat(_toConsumableArray(commonClassNames), [customClassName]).join(' ');
};

optimized.sheet = _sheet2.default;

optimized.clear = function () {
  while (commonCache.length) {
    commonCache.pop();
  }
  _index2.default.clear();
};

optimized.reset = function () {
  optimized.clear();
  optimized.sheet.flush();
};

Object.defineProperty(optimized, 'rules', {
  get: function get() {
    return _sheet2.default.rules();
  }
});

Object.defineProperty(optimized, 'css', {
  get: function get() {
    return _sheet2.default.rules().map(function (r) {
      return r.cssText;
    }).join('');
  }
});

exports.default = optimized;